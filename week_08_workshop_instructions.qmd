---
title: "Workshop Exercise: Grouping, Summarizing and Plotting"
author: "ANGELIKI DASKALOPOULOU"
---

# 1. Data Preparation

## 1.1. Load Packages

To get started, **load in the needed packages**: pandas, numpy, plotly express.

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
```

## 1.2. Import Data

Download the `india_tuberculosis.csv` file from the course portal and save it in your `data` folder.

Now, **read in the `india_tuberculosis` dataset into Python from your data folder** into a DataFrame called `tb`. The DataFrame you import should have 880 rows and 21 columns. Remember to use relative paths to allow your script to use project-relative paths.

```{python}
# Import the CSV file
# Your code here
tb = pd.read_csv("data/india_tuberculosis.csv")

tb
```


Run the following line of code to convert all column names to lowercase and replace spaces with underscores:

```{python}
tb.columns = tb.columns.str.lower().str.replace(' ', '_')
```

## 1.3. Calculate Total Cost

Each patient record notes the location and cost of up to three visits. Add together these costs (`first_visit_cost`, `second_visit_cost`, and `third_visit_cost`) to create a `total_cost` variable.

```{python}
# Calculate total cost
tb['total_cost'] = tb['first_visit_cost'] + tb['second_visit_cost'] + tb['third_visit_cost']

tb
```


# 2. Investigating Healthcare Costs by Education Level

## 2.1. Reorder Education Levels

Before moving further, let's take a closer look at the `education` variable in our dataset:

```{python}
# Count unique values of education levels
tb["education"].value_counts()
```

You'll notice that education levels are ordered in descending order by default. However, in this case, we want to reorder the education levels so that they are arranged in a chronological order (lower education levels come first).

First, use the `replace()` method to convert the "Graduate & Above" values to "Graduate".

```{python}

tb["education"] = tb["education"].replace("Graduate & Above", "Graduate")

```

Now, run the code below to reorder the education levels by converting the `education` variable into a categorical variable with the levels defined in a specific order:

```{python}
education_levels = [
    "No Education",
    "Primary",
    "Middle",
    "Secondary",
    "Higher Secondary",
    "Graduate",
    "Missing",
]

tb["education"] = pd.Categorical(
    tb["education"], categories=education_levels, ordered=True
)
```

Now, inspect the `education` variable again to make sure it has been reordered correctly:

```{python}
tb["education"].value_counts()
```

We will use the newly transformed `education` variable for grouping, summarizing, and plotting below.

## 2.2. Table of Costs by Education Level

Let's compare the cost of treatment at different health facilities using a summary table. Use pandas methods to group by education level and create a summary table with two variables:

- The number of patients in each education level
- The mean total cost for each education level

Store the resulting DataFrame as an object called `edu_cost_table`.

```{python}
# Create summary table
edu_cost_table =tb.groupby("education").agg(
    total_cost_mean=("total_cost", "mean"), 
    count=("education", "size")
    ).reset_index()


edu_cost_table
```

Reorder the rows of the summary table to go from highest to lowest mean cost. You can use the `sort_values()` method to do this.

```{python}
# Reorder summary table
edu_cost_table = edu_cost_table.sort_values(by="total_cost_mean", ascending=False)

edu_cost_table

```

Which education level has the highest mean total cost of treatment?

Answer : The graduate


Below, we will visualize the data with a plot to see if there is a relationship between education level and healthcare costs.

## 2.3. Visualize Costs by Education Level

Using `plotly.express` and the costs summary table you created earlier, create a bar plot of mean costs by education level. It should be sorted from lowest education level to highest education level.


```{python}

education_levels = [
    "No Education",
    "Primary",
    "Middle",
    "Secondary",
    "Higher Secondary",
    "Graduate",
    "Missing",
]

edu_cost_table["education"] = pd.Categorical(
    edu_cost_table["education"], categories=education_levels, ordered=True
)
```
```{python}
edu_cost_table = edu_cost_table.sort_values(by="education", ascending=True)

fig = px.bar(
    edu_cost_table,
    x="education",
    y="total_cost_mean",
    title="Mean Total Cost by Education Level",
    labels={"education": "Education Level", "mean_total_cost": "Mean Cost"},
    text_auto=True  
)

# Show plot
fig.show()

```

Write a short interpretation of the plot.

The mean cost does not always increase with the level of education. Middle & Secondary do have an increase but surpisingly higher secondary is less. graduate seems to have the highest cost. To have better understanding, it might be helpful to also observe the median, min, max. Overall, the education level might be related to income level and access to more expensive treatment.


# 3. Investigating Healthcare Costs by Age Group

## 3.1. Create an `age_group` Variable

The `age` variable records the age of each patient in years. We want to classify the patients into four approximately equally-sized age groups for further analysis.

First, run the code below to determine the quantiles of the `age` variable to decide the cutoffs for each age group:

```{python}
# Determine quantiles of age
tb["age"].describe()
```

Based on the quantile markers (min, 25%, 50%, 75%, max), we can note the following four age groups with approximately equal numbers of patients:

- 18-36
- 37-47
- 48-57
- 58+

Use a custom function called `assign_age_group()`, then vectorize it using `np.vectorize()` and apply it to the `age` variable to create an `age_group` variable.

(If you prefer, you can also use `pd.cut()` to create the `age_group` variable.)

```{python}
# Your code here
bins = [18, 36, 47, 57, float('inf')]  
labels = ["18-36", "37-47", "48-57", "58+"]


tb['age_group'] = pd.cut(tb['age'], bins=bins, labels=labels, right=True)

tb
```

Now, check if we met our goal of having a similar number of patients in each age group using the `value_counts()` method:

```{python}
# Tabulate age groups
tb["age_group"].value_counts(normalize=True)
```

**Checkpoint:** If you classified the age groups correctly, you will see that each age group has approximately 24-26% of the patients.

## 3.2. Table of Costs by Age Group

Next, summarize the total healthcare costs by age group. Use pandas methods to group by `age_group` and create a summary table with two variables:

- The number of patients in each age group
- The mean total cost for each age group

Store the resulting DataFrame as an object called `age_cost_table`.

```{python}
# Create summary table for age groups
age_cost_table = tb.groupby("age_group").agg(
    total_cost_mean=("total_cost", "mean"), 
    count=("age_group", "size")
    ).reset_index()

age_cost_table
```

## 3.3. Visualize Costs by Age Group

Using `plotly.express` and the costs summary table you created earlier, create a bar plot of mean costs by age group.

```{python}
# Your code here

fig_2 = px.bar(
    age_cost_table,
    x="age_group",
    y="total_cost_mean",
    title="Mean Total Cost by Age Group",
    labels={"age_group": "Age Group", "mean_total_cost": "Mean Cost"},
    text_auto=True  
)

# Show plot
fig_2.show()
```

Write a short interpretation of the plot.

The group with the highest mean is the 18-36, followed by the 58+. It seems that being in the 37-57 group, the total cost is less. There might be other underlying factors that impact the cost along with the age group.

# 4. Bonus Challenge (Optional)

If you finish early and have extra time, you can explore and transform the dataset further.

We can look at two types of health facilities in the dataset: private and public (government).

```{python}
# List of healthcare locations
tb["first_visit_location"].unique()
```

Note: PHC = primary health center, GH = govt hospital, etc.

## 4.1. Comparing Delays in Public vs Private Health Facilities

Let's create a new variable indicating whether a healthcare location is private or public. We can do this using the `str.contains()` function from pandas.

```{python}
tb['first_visit_type'] = np.where(
    tb['first_visit_location'].str.contains('Pvt'),
    'Private',
    'Public'
)
```


```{python}
tb
```

Inspect the new variable in `tb`.

Your assignment for this challenge is to summarize delays in treatment and compare the length of delays between private and public health facilities.

You can start by making a summary table of `treatment_initiation_delay_in_days`, grouped by `first_visit_type`. Then visualize the data and draw insights from your findings.




```{python}
delay_sum =tb.groupby("first_visit_type").agg(
    delay_mean=("treatment_initiation_delay_(in_days)", "mean")
    ).reset_index()

delay_sum
```


```{python}
fig_3 = px.bar(
    delay_sum,
    x="first_visit_type",
    y="delay_mean",
    title="Mean delay of treatment by health facility type",
    labels={"first_visit_type": "Facility Type", "delay_mean": "Mean Delay in days"},
    text_auto=True  
)

# Show plot
fig_3.show()
```

There is a 1 day delay in Public facilities. 
