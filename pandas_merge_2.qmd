# Packages

```{python}
import pandas as pd
import country_converter as cc
```


# Data


```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```


# One-to-many joins


```{python}
people
```


```{python}
test_info_many
```


```{python}
pd.merge(people, test_info_many)
```

# Practice Q: Merging One-to-Many Crop Yields


```{python}
farm_info
```


```{python}
crop_yields
```


```{python}
pd.merge(farm_info,crop_yields)
```

# Multiple Key Columns


```{python}
traffic_flow
```



```{python}
pollution_levels
```


```{python}

# not what we want
pd.merge(traffic_flow, pollution_levels, on="street_name", how="left")
```

What we want to do is match on BOTH street_name AND time_of_day. To do this, we need to tell Python to match on two columns by specifying both column names in a list.


```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

# Practice Q: Calculate Oil Consumption per Capita

We have two datasets containing information about countries:

- oil_consumption: Contains yearly oil consumption in tonnes

- tidyr_population: Contains yearly population data


```{python}
# View the datasets
oil_consumption.sort_values(by=["country", "year"])
```


```{python}
tidyr_population.sort_values(by=["country", "year"])
```

Join these datasets using merge() with a left join. Since we want to match both country AND year, youâ€™ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

Which country had the highest per capita oil consumption in 1995?



```{python}
df = pd.merge(oil_consumption, tidyr_population, on=["country", "year"],how="left" )



# Calculating oil consumption per capita
df['consumption_per_capita'] = df['oil_consump'] / df['population']

df
```

#  Key Mismatches


```{python}
people
```


```{python}
test_info_diff
```


```{python}
people.merge(test_info_diff, on='name', how='left')
```


```{python}
test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```




```{python}
test_info_diff['name'].unique()
```


```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```


```{python}
people.merge(test_info_diff, on='name', how='inner')
```

# Practice Q: Inner Join Countries


```{python}
asia_countries
```


```{python}
asia_population
```


```{python}
pd.merge(asia_countries, asia_population)
```


```{python}
asia_countries['Country'].unique()
```


```{python}
asia_population['Country'].unique()
```


```{python}
asia_population['Country'] = asia_population['Country'].str.title()
```

```{python}

asia_population['Country']= asia_population['Country'].replace( {'Philipines': 'Philippines'})
```

# Key Mismatches: Oil Consumption Example



```{python}
oil_pop =pd.merge(
    oil_consumption, tidyr_population, on=["country", "year"], how="left"
).sort_values(["country", "year"])

oil_pop
```


we should check for any mismatches by using a Set Arithmetic


```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

countries in oil_consumption that are not in tidyr_population, 

```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```

countries in tidyr_population that are not in oil_consumption:

```{python}
missing_in_oil = pop_countries - oil_countries
missing_in_oil
```


# Merging with Country Codes


```{python}
# How to use country_converter
cc.convert("Nigeria", to='ISO3')
```


```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')


tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')

oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')

oil_pop_code
```



# Practice Q: Merging Oil Consumption with Geographic Data

oil_2012, records the oil consumption for the year 2012:

```{python}
oil_2012
```

country_regions lists countries along with their respective regions and continents:

```{python}
country_regions
```



Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.


```{python}
oil_2012["country_code"] = cc.convert(oil_2012["country"], to="ISO3")


oil_2012_regions = oil_2012.merge(country_regions, on="country_code", how="left")

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby("continent")["oil_consump"].idxmax()
]

max_oil_by_continent[["country", "continent", "oil_consump"]]
```