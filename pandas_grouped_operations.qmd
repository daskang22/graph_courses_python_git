## Learning Objectives

By the end of this lesson, you will be able to:

- Add group-level summary statistics as new columns using transform().
- Count values within groups using value_counts().
- Compute cumulative sums within groups.


## Imports


```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar

#remove/silence  warnings
pd.options.mode.copy_on_write = True

warnings.filterwarnings("ignore")

# limit the n of rows when display a df

pd.options.display.max_rows = 10
```


## Data


```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column

weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```


## Adding Summary Statistics Using transform()


```{python}
weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))

```

```{python}
# Does not work
weather['mean_precip'] = weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
weather

```


```{python}
weather["mean_precip_month"] = weather.groupby("month")["precipitation"].transform(
    "mean"
)

weather
```


```{python}
weather['prep_median_month'] = weather.groupby('month')['precipitation'].transform('median')    
weather
```


```{python}
weather['precip_sum_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```


```{python}
weather["precip_month_prop"] = weather["precipitation"] / weather["precip_sum_month"]
weather
```

## Practice Q: Daily Tip Proportions

Using the tips dataset, calculate: 1. A new column daily_total_tips containing the total tips for each day 2. A new column tip_proportion showing what proportion of that dayâ€™s total tips came from each customer

```{python}

tips = px.data.tips()
tips

```

```{python}
tips['daily_total_tips'] = tips.groupby('day')['tip'].transform('sum')

tips
```

```{python}
tips["tip_proportion"] = tips["tip"] / tips["daily_total_tips"]

tips
```


```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```

## Counting Values Within Groups Using value_counts()


```{python}
# Count of weather types
weather["weather"].value_counts()
```


```{python}
weather['weather'].value_counts(normalize=True)
```


```{python}
# Counts of weather types per month
weather.groupby('month')['weather'].value_counts()
```


```{python}
weather.groupby('month')['weather'].value_counts().reset_index()
```

## Practice Q: Count Smokers and Non-Smokers by Day

Using the tips dataset, count the number of smokers and non-smokers for each day.


```{python}
tips.groupby('day')['smoker'].value_counts().reset_index()
```

## Computing Cumulative Sums Within Groups


```{python}
# Cumulative sum of precipitation

weather["precip_cumul"] = weather["precipitation"].cumsum()
weather
```


```{python}
# Cumulative precipitation per month
weather["precip_cumul"] = weather.groupby("month")["precipitation"].cumsum()
weather
```

# Practice Q: Cumulative Tip Amount by Day

Using the tips dataset, compute the cumulative sum of total_bill for each day, adding a new column cumul_total_bill_day. Then add another column cumul_tip_day that contains the cumulative sum of tip for each day.


```{python}
tips = px.data.tips()
tips = tips.sort_values('day')
tips

```


```{python}
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()

tips
```


```{python}
tips["cumul_tip_day"] = tips.groupby("day")["tip"].cumsum()

tips
```