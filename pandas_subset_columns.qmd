 # Subsetting columns

 # Imports


```{python}
 import pandas as pd
```

# Dataset

```{python}
yao = pd.read_csv("data/yaounde_data.csv")

yao
```

## Selecting columns with square brackets []


```{python}
# get only these variables
yao[["age","sex"]]
```

```{python}
# will work but it is not a df

yao["age"]
```

# Storing data subsets



```{python}

yao_subset = yao[["age","sex"]]
yao_subset
```


```{python}
yao_subset = yao[["age"]]
```

## Practice Q: Select Columns with []

Use the [] operators to select the “weight_kg” and “height_cm” variables in the yao DataFrame. Assign the result to a new DataFrame called yao_weight_height. Then print this new DataFrame.


```{python}
yao_weight_height = yao[["weight_kg","height_cm"]]

yao_weight_height
```

## Excluding columns with drop()


```{python}
yao.drop(columns=["age"])
```

```{python}
yao.drop(columns=["age", "age_category"])
```

# Practice Q: Drop Columns with drop()

From the yao DataFrame, remove the columns highest_education and consultation. Assign the result to a new DataFrame called yao_no_education_consultation. Print this new DataFrame.



```{python}
yao_no_education_consultation = yao.drop(columns=["highest_education", "consultation"])

yao_no_education_consultation
```

# Using filter() to select columns by regex

Regex: Regular Expressions


```{python}
#contains 
yao.filter(regex="ig")
```

```{python}
#starts with
yao.filter(regex="^ig")
```

```{python}
#ends with
yao.filter(regex="result$")
```

# Practice Q: Select Columns with Regex

Select all columns in the yao DataFrame that start with “is_”. Assign the result to a new DataFrame called yao_is_columns. Then print this new DataFrame.

```{python}
#starts with
yao_is_columns = yao.filter(regex="^is_")

yao_is_columns
```

## Change column names with rename()


```{python}
yao.rename(columns={"age" : "patient_age", "sex" : "patient_sex"})
```

## Practice Q: Rename Columns with rename()

Rename the age_category column in the yao DataFrame to age_cat. Assign the result to a new DataFrame called yao_age_cat. Then print this new DataFrame.


```{python}
yao_age_cat = yao.rename(columns={"age_category" : "age_cat"})

yao_age_cat
```

# Cleaning messy column names

```{python}
test_df = pd.DataFrame(
    {"good_name" : range(3),
    "bad name" : range(3),
    "bad*@name*2" : range(3)
    }
)

test_df
```


```{python}
# bad names are not accessible through dot syntax
# test_df.bad name
```


```{python}
# The regular expression r'[^a-zA-Z0-9]' matches any character that # is not a letter (either uppercase or lowercase) or a digit. 

test_df.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)
```


```{python}
test_df.columns = test_df.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)
test_df
```

# Practice Q: Clean Column Names with Regex

Consider the data frame defined below. Use the str.replace() method to clean the column names.

```{python}
cleaning_practice = pd.DataFrame(
    {"Aloha": range(3), "Bell Chart": range(3), "Animals@the zoo": range(3)}
)
cleaning_practice
```


```{python}
cleaning_practice.columns = cleaning_practice.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)

cleaning_practice
```