## Learning objectives


1. You can use pandas.DataFrame.agg() to extract summary statistics from datasets.

2. You can use pandas.DataFrame.groupby() to group data by one or more variables before performing operations on them.

3. You can pass custom functions to agg() to compute summary statistics.


## Imports


```{python}
import pandas as pd
import numpy as np

```


```{python}
import os
print(os.getcwd())  # This shows where Python is looking for the file

```

## Data


```{python}
yao = pd.read_csv("graph_courses_workspace/data/yaounde_mini.csv")
yao
```

```{python}
yao[["age"]].mean()
```


```{python}
yao.agg(mean_age=('age', 'mean')) # THIS IS A TUPPLE
```

Syntax : 

df.agg(summary_name=("COLUMN_TO_SUMMARIZE", "SUMMARY_FUNCTION"))


```{python}
yao_summary = yao.agg(mean_age=("age", "mean"), median_age=("age", "median"))

yao_summary
```

## Practice Q: Mean and median weight

Use agg() and the relevant summary functions to obtain the mean and median of respondent weights from the weight_kg variable of the yao data frame.


```{python}
yao.agg(mean_weight=("weight_kg", "mean"), median_weight=("weight_kg", "median"))

```

## introducing groupby()

```{python}
yao.groupby("sex")
```

```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median"))
```

```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median")).reset_index()
```

```{python}
(
    yao.groupby("sex")
    .agg(mean_age=("age", "mean"), median_age=("age", "median"))
    .reset_index()
) 

```

maximum and minimum weights and number of  individuals per neighborhood

```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight=("weight_kg", "max"),
        min_weight=("weight_kg", "min"),
        num_inds=("weight_kg", "size"),  # the size function counts rows per group
    )
    .reset_index()
) 
```

## Practice Q: Min and max height per sex

Use groupby(), agg(), and the relevant summary functions to obtain the minimum and maximum heights for each sex in the yao data frame, as well as the number of individuals in each sex group.


```{python}
(
    yao.groupby("sex")
    .agg(
        max_weight=("height_cm", "max"),
        min_weight=("height_cm", "min"),
        count=("height_cm", "size"),  # the size function counts rows per group
    )
    .reset_index()
) 
```

## Nested Groupping


```{python}


(
    yao.groupby(['sex', 'neighborhood'])
    .agg(
        max_weight=("weight_kg", "max"),
        min_weight=("weight_kg", "min"),
        num_inds=("weight_kg", "size"),  # the size function counts rows per group
    )
    .reset_index()
) 
```

## Practice Q: Min and max height per age sex group

Use groupby(), agg(), and min() and max() to get the minimum and maximum heights for each age-sex group in the yao data frame. The variables needed are age_category_3 and sex.



```{python}
(
    yao.groupby(['age_category_3', 'sex'])
    .agg(
        max_weight=("height_cm", "max"),
        min_weight=("height_cm", "min"),
        count=("height_cm", "size"),  # the size function counts rows per group
    )
    .reset_index()
) 
```

## NaN values in agg()


 this actually excludes some rows with NaN smoking status from the summary table.

```{python}
(
    yao.groupby("is_smoker")
    .agg(weight_mean=("weight_kg", "mean"))
    .reset_index()
)
```

We can include these individuals in the summary table by setting dropna=False with the groupby() function.



```{python}
(
    yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"))
    .reset_index()
)
```

we can see how many missing we have

```{python}
(
    yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"), 
         count=("weight_kg", "size"))
    .reset_index()
)
```

## Practice Q: Mean weight by pregnancy status

Use groupby(), agg(), and the mean() function to obtain the mean weight (kg) by pregnancy status in the yao data frame. Include individuals with NaN pregnancy status in the summary table.



```{python}
(
    yao.groupby("is_pregnant", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"), 
         count=("weight_kg", "size"))
    .reset_index()
)
```

## Custom stats with lambda functions


```{python}
def range_func(x):
    return max(x) - min(x)

print(range_func([1, 5, 6]))  
```


using a lamda

```{python}
range_func = lambda x: max(x) - min(x)
print(range_func([1, 2, 3, 4]))  # Output: 3
```

range of weights per neighbourhood


```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_range=("weight_kg", lambda x: max(x) - min(x)))
    .reset_index()
)
```

Coeficient of variation : (std/mean) * 100

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_cv=("weight_kg", lambda x: (np.std(x) / np.mean(x)) * 100))
    .reset_index()
)
```

## Practice Q: IQR of age by neighborhood


Find the interquartile range (IQR) of the age variable for each neighborhood. The IQR is the difference between the 75th and 25th percentiles. Your lambda will look like this: lambda x: x.quantile(0.75) - x.quantile(0.25)


```{python}
(
    yao.groupby("neighborhood")
    .agg(age_iqr=("age", lambda x: x.quantile(0.75) - x.quantile(0.25)))
    .reset_index()
)

```